CQRS

Design pattern que divide responsabilidades dependendo do tipo de operação a ser executada: comando ou consulta. Em uma aplicação padrão, a mesma base de dados serve para escrita e leitura.
Até certo ponto funciona, mas quanto mais complexo fica a aplicação, diferentes modelos podem ser retornados, diferentes retornos criados, etc. Isso acaba gerando inconsistência entre
o que se lê e o que se escreve, pois as operações podem ocorrer simultaneamente.

Comando: 

-salva dados
-não retorna dados para o cliente
-valida modelo
-processa lógica de aplicação: se vai precisar de algo mais, consulta externa, etc....

Consulta(query):

-recupera dados para o cliente
-verifica contexto da requisição: por exemplo, se um usuário pode ou não realizar determinada consulta.
-idempotente: pode executar várias vezes, mas o resultado sempre será o mesmo.

Para solucionar, podemos usar o design pattern mediator, onde uma classe mediadora lida com as classes participantes de determinada operação. Toda a comunicação é feita através do mediador e não entre
as classes. Em .net se usa o MediatR.

No contexto do CQRS, seria algo mais ou menos assim:

comando1                handlercomando1
            mediator
comando2                handlercomando2

Assim, podemos desacoplar serviços, controladores e repositórios, diminuindo dependências e referências, focando-as no mediador.


No contexto de um comando:

1-Criar a classe do comando: ela implementa a interface IRequest<T>, para identificar que aquilo é um comando (ou uma query). T é o tipo do seu retorno, se houver.
Por exemplo: public class CreateRestaurantCommand : IRequest<int> -> indica que vai retornar um inteiro, possivelmente o id do objeto.

using MediatR;

namespace Restaurants.Application.Mediator.Restaurants.Commands.CreateRestaurant;

public class CreateRestaurantCommand : IRequest<int>
{
    public string Name { get; set; } = default!;
    public string Description { get; set; } = default!;
    public string Category { get; set; } = default!;
    public bool HasDelivery { get; set; }
    public string? ContactEmail { get; set; }
    public string? ContactNumber { get; set; }
    public string? City { get; set; }
    public string? Street { get; set; }
    public string? PostalCode { get; set; }
}

Nada mais é que uma espécie de DTO de criação.

2-Criar a classe que vai tratar a operação, ou o handler: ela implementa a interface IRequestHandler<T, V>, para indicar que vai ser o handler de um comando do tipo T, e que 
vai ter como retorno algo do tipo V.

Por exemplo: IRequestHandler<CreateRestaurantCommand, int> -> é um handler que lida com os comandos CreateRestaurantCommand e que vai ter um retorno inteiro. Ao implementar, ele usa o 
método padrão handle:

using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using Restaurants.Domain.Entities;
using Restaurants.Domain.Repositories;

namespace Restaurants.Application.Mediator.Restaurants.Commands.CreateRestaurant;

public class CreateRestaurantCommandHandler(ILogger<CreateRestaurantCommandHandler> logger,
    IMapper mapper, IRestaurantRepository restaurantRepository) : IRequestHandler<CreateRestaurantCommand, int>
{
    public async Task<int> Handle(CreateRestaurantCommand request, CancellationToken cancellationToken)
    {
        logger.LogInformation("Creating new restaurant");
        Restaurant restaurant = mapper.Map<Restaurant>(request);
        return await restaurantRepository.Create(restaurant);
    }
}

Esse handle é chamado automaticamente. É possível ver que também as dependências, que estariam em classes de serviço e/ou repositíorio, ficam em um só lugar.

3-Criar classes de validação se houver: se você usa uma biblioteca como o fluentvalidation, na sua versão mais recente, eles incentivam o uso de validações manuais, ou seja,
de colocar manualmente o validador desejado e não usar o pipeline de validação do próprio asp.net. Se houver validações, ele pode vir pra cá:

using FluentValidation;

namespace Restaurants.Application.Mediator.Restaurants.Commands.CreateRestaurant;

public class CreateRestaurantCommandValidator : AbstractValidator<CreateRestaurantCommand>
{
    public CreateRestaurantCommandValidator()
    {
        RuleFor(r => r.Name).Length(3, 100);
        RuleFor(r => r.Description).NotEmpty().WithMessage("Description is required.");
        RuleFor(r => r.Category).NotEmpty().WithMessage("Category is required.");
        RuleFor(r => r.ContactEmail).EmailAddress().WithMessage("Provide a valid email address.");
        RuleFor(r => r.ContactNumber).NotEmpty().WithMessage("Contact number is required.");
    }
}

No contexto de uma query: os passos seriam os mesmo, a diferença seria no fato de que os retornos seriam objetos ou listas de objetos.

Já no controlador, no contexto de um post:

 [HttpPost]
 public async Task<IActionResult> CreateRestaurant([FromBody] CreateRestaurantCommand createRestaurantCommand)
 {
     ValidationResult result = await validator.ValidateAsync(createRestaurantCommand);
     if (!result.IsValid)
     {
         return BadRequest(result.Errors);
     }
     else
     {
         int id = await mediator.Send(createRestaurantCommand);
         return CreatedAtAction(nameof(CreateRestaurant), new { id }, null);
     }

 }

 O objeto mediator vai usar o método Send, que recebe um comando, que pode ser um command para alterar dados ou uma query:

 [HttpGet("{id}")]
public async Task<IActionResult> GetById([FromRoute] int id)
{
    var restaurant = await mediator.Send(new GetRestaurantByIdQuery(id));
    if (restaurant == null)
    {
        return NotFound();
    }
    else
    {
        return Ok(restaurant);
    }
}

Só que no caso de uma consulta, basta instanciar o objeto da query que vai como parâmetro. No post, passa passá-lo como parâmetro, pois ele toma o lugar do DTO.


=====================

Serilog: é uma biblioteca que serve para executar o log de informações de várias formas e saídas em uma aplicação:

dotnet add package Serilog.AspNetCore -> para aplicações AspNetCore

Como é uma funcionalidade "cross-cutting", ou seja, que serve para toda ou mais de uma parte da aplicação, ela fica geralmente na API e sua configuração é feita em Program.cs:

builder.Host.UseSerilog((context, configuration) => {
    configuration
        .MinimumLevel.Override("Microsoft", LogEventLevel.Warning)
        .MinimumLevel.Override("Microsoft.EntityFrameworkCore", LogEventLevel.Information)
        .WriteTo.Console();
});

São recebidos dois parâmetros: context e configuration. É possível definir a saída (Console()), o nível mínimo de log, inclusive para que namespace, (Para Microsoft, o mínimo é warning, por exemplo).
É possível alterar também o que é logado como informações sensíveis e a serialização de parâmetros:

Em SQLITE:

protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
{
    base.OnConfiguring(optionsBuilder);
    optionsBuilder.UseSqlite($"Data Source={DbPath}").EnableSensitiveDataLogging(); -> permite imprimir informações de parâmetros passados
}

logger.LogInformation("Updating restaurant: {@Restaurant}", request); -> como ele implementa o ILogger, é possível usá-lo diretamente.
O @ após o parâmetro indica ao Serilog que vai serializar o objeto request.

===========

Documentando a API: uma opção seria usar Swagger, uma ferramenta de documentação:

dotnet add package Swashbuckle.AspNetCore (no projeto da API).

E para habilitar:

1-builder.Services.AddSwaggerGen();
2-app.UseSwagger();
3-app.UseSwaggerUI();

Ao rodar a aplicação e ir em <dominio>/swagger será possível ver os endpoints existentes na 
aplicação.


================

Middleware para exceções: 

Suponha que ocorra um erro de conexão ao banco de dados.
Se a aplicação não possuir um meio de capturar e tratar esses erros, eles podem ir direto como
uma resposta ao cliente. Uma opção seria em cada endpoint, usar try-catch.

No entanto, isso precisaria ser feito em todo endpoint da aplicação, e lidar com try-catch 
pode ser custoso. Outra opção seria fazer um middleware.

Nada mais seria que uma operação a ser executada entre a requisição feita e o endpoint. Muito usado
para validar dados, por exemplo: antes de chegar logo ao endpoint, podemos validar algumas informações
antes, evitando operações desnecessárias. Por exemplo em Program.cs:

app.UseSerilogRequestLogging();

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

1-requisição chega e vai para o middleware de Serilog. Se estiver tudo certo, ele chama o próximo middleware (next()) semelhante ao express.js.
2-passa pelo UseHttpsRedirection, depois next();
3-passa pelo UseAuthorization, next();
4-por fim o MapControllers, que vai mapear a requisição para uma ação de um controlador, e executá-la.

Quando a requisição é feita, ela volta pelo mesmo pipeline de middleware, que por final, retorna uma
resposta (response) para o cliente.

Um middleware de captura de exceções seria um try-catch gigante:

try{
    //faz algo
    next();
}catch(exception){
    //tratar aqui -> retorna logo uma resposta
}



namespace Restaurants.API.Middlewares;

public class ErrorHandlingMiddleware(ILogger<ErrorHandlingMiddleware> logger) : IMiddleware
{
    public async Task InvokeAsync(HttpContext context, RequestDelegate next)
    {
        try
        {
            await next.Invoke(context);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
            context.Response.StatusCode = 500;
            await context.Response.WriteAsync("Something went wrong");
        }
    }
}

A classe implementa IMiddleware que possui o método InvokeAsync. Ele recebe o context e o next (próximo middleware).
Ele tenta invocar o próximo passando o contexto. Se der algo errado, cai no catch e manda uma resposta de volta.


==================

Custom exceptions:

Podemos combinar exceptions customizadas com o tratamento de erros com middleware para melhorar o projeto.

Um exemplo é que em nossos handlers, verificamos se a entidade existe ou não, retornando assim, true ou false. Podemos criar uma exception em domain (faz mais sentido pois nosso domínio está lá).

namespace Restaurants.Domain.Exceptions;

public class NotFoundException(string message) : Exception(message)
{
}

E usar nos handlers:

var restaurantDB = await restaurantRepository.GetRestaurantByIdAsync(request.Id);

if (restaurantDB is null)
{
    throw new NotFoundException($"Restaurant with id {request.Id} not found.");
}

E no nosso middleware:


using Restaurants.Domain.Exceptions;

namespace Restaurants.API.Middlewares;

public class ErrorHandlingMiddleware(ILogger<ErrorHandlingMiddleware> logger) : IMiddleware
{
    public async Task InvokeAsync(HttpContext context, RequestDelegate next)
    {
        try
        {
            await next.Invoke(context);
        }catch(NotFoundException notFound)
        {
            logger.LogWarning(notFound, notFound.Message);
            context.Response.StatusCode = 404;
            await context.Response.WriteAsync(notFound.Message);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
            context.Response.StatusCode = 500;
            await context.Response.WriteAsync("Something went wrong");
        }
    }
}


=========================

Subentidades

Em REST, pode ocorrer de algumas entidades só existirem quando uma outra existir primeiro. Por exemplo, no contexto de uma aplicação de restaurantes, a lista de pratos
daquele restaurante só pode existir quando existir um restaurante primeiro, sendo assim prato uma subentidade. O padrão REST sugere que os caminhos fiquem:

/api/restaurants/{restaurantid}/dishes -> ou seja, a partir do restaurante de id restaurantid, se acessam os seus pratos.
/api/dishes -> só faria mais sentido se dish/pratos fosse uma entidade auto contida, que não dependesse de outra para existir.

Então, faz mais sentido um controlador separado para a entidade de pratos.

=============================

Authentication:

É o meio pelo qual um usuário se identifica em um sistema, para dizer que ele é ele mesmo.
Pode ser feito por tokens, pin, chave privada, etc. Ou seja, uma forma de um usuário provar sua
identidade.

Existem diferentes categorias de processos de autenticação:

1-Algo que você saiba: senha, pin, resposta de uma pergunta secreta
2-Algo que você tenha: token, cartão
3-Algo que você é: digital, reconhecimento de face, voz

Muitas aplicações usam autenticação em dois fatores: algo que você sabe com algo que você tenha.
Por exemplo: usuário entra em uma aplicação e a mesma pede por alguma informação que só ele saiba (token).

Asp.net core identity: provê autenticação e autorização. Ele tem classes prontas que possuem informação
sobre como queremos identificar o usuário e seus papéis: IdentityUser e IdentityRole. Além disso,
um dbcontext para essa parte de identificar e autorizar o usuário. Ele também possui interfaces
e métodos auxiliares para poder lidar com senhas, remoção de usuário da aplicação, registro, exposição de
endpoints, etc. Ele também trabalha em conjunto com o Entity Framework para lidar com as tabelas e banco
de dados.

E estrutura básica de identidade seria (de baixo para cima):

1-IdentityUser
2-IdentityDbContext
3-UserStore
4-UserManager
5-IdentityEnpoints



Para configurar:

1-É possível usar a classe base IdentityUser, mas se quisermos customizar, podemos criar uma outra classe
que herde dela:

using Microsoft.AspNetCore.Identity;

namespace Restaurants.Domain.Entities;

public class User : IdentityUser 
{
    //customizar aqui
}

2-No nosso contexto de banco de dados, é preciso alterar para que ele implemente de IdentityDbContext<User>
para que na hora de gerar as migrações, as tabelas apropriadas sejam criadas.

3-Na configuração da aplicação (no caso, no módulo Application), precisamos habilitar 
os endpoints relacionados a autenticação e autorização, além de indicar que o contexto do banco de dados vai ser usado:

services.AddIdentityApiEndpoints<User>().AddEntityFrameworkStores<RestaurantsSqliteDbContext>();

4-Em Program.cs, indicar que o AddEndpointsApiExplorer() vai ser chamado para disponibilizar os endpoints,
e que deve-se mapear a classe User criada para os endpoints, para que o .net saiba qual classe usar:

builder.Services.AddEndpointsApiExplorer();
app.MapIdentityApi<User>();

*instalar:

dotnet add package Microsoft.AspNetCore.Identity.UI - para telas/endpoints
dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore - funcionalidade core

*após mudar as classes de dbcontext, criar migrações e executar para gerar tabelas no banco

*obs: por padrão, identitycore tem suporte a minimal apis, sendo assim, que sem a linha:

builder.Services.AddEndpointsApiExplorer();

Os endpoints não aparecem no swagger.

=========================

Adicionando identidade aos endpoints:

Em alguns casos, os endpoins necessitam de que o usuário esteja identificado para poder usar.

==========================

Asp.net identity é uma solução completa de usuários, papéis, autenticação e autorização. Na versão mais nova do dotnet 8, ele também tem suporte aos endpoints para
poder realizar tais funções (identity api endpoints).

1-O primeiro passo seria criar o dbcontext:

public class ApplicationDbContext: DbContext
{
    
}

No entanto, como queremos incorporar autenticação no projeto, é necessário implementar IdentityDbContext:

public class ApplicationDbContext: IdentityDbContext
{
    
}

Com isso, ele dá acesso às tabelas referentes de autenticação e autorização, além das demais que forem criadas aqui dentro. Outro ponto é que podemos extender o usuário padrão, que é o
IdentityUser:

using Microsoft.AspNetCore.Identity;

namespace Authtest.Models
{
    public class User: IdentityUser
    {
    }
}

User herdando de IdentityUser vai ter tudo dele mais o que for customizado. Agora, podemos dizer ao IdentityDbContext que ao invés de olhar para o IdentityUser (padrão), que 
ele olhe para User:

public class ApplicationDbContext: IdentityDbContext<User>
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options): base(options) { }
}

Com isso, a nível de banco de dados, já está configurado o Identity Core.

2-O próximo passo é configurar a aplicação para usar o Identity. Em program.cs:

builder.Services.AddAuthentication();
builder.Services.AddAuthorization();
builder.Services
    .AddIdentityApiEndpoints<User>()
    .AddEntityFrameworkStores<ApplicationDbContext>();

Authentication diz quem você é. Authorization diz o que você pode fazer. A ordem importa aqui. Depois, adicionamos os endpoints do Identity baseados na entidade customizada que foi 
criada para representar o usuário: .AddIdentityApiEndpoints<User>(). E por fim, dizemos que queremos usar o Identity com o EntityFramework: .AddEntityFrameworkStores<ApplicationDbContext>();

*se por apenas o builder.Services.AddAuthorization(), parece que já adiciona o builder.Services.AddAuthentication.

No final, mapeamos os enpoints para o usuário criado:

app.MapIdentityApi<User>();

Depois criar e rodar a migração para gerar as tabelas no banco.

Se formos usar o swagger como documentação de api, precisamos configurá-lo também:

app.UseSwagger();
app.UseSwaggerUI();
app.MapSwagger();

O Identity funciona com duas formas de autenticação: cookies ou jwt (json web token). No endpoint de login, podemos setar a propriedade useCookies para true. Assim, quando
fizer o login, já seta para nós o cookie de autenticação.

É possível também customizar rotas para que elas exijam ou não autorização:

app.MapGet("/", () => { 
    return "hello world";
}).RequireAuthorization();

Se não tiver o cookie setado, vai dar 401.


OBS: Na configuração de autorização e autenticação, só usar o método services.AddAuthentication();
Pois ao tentar passar um token ele fica indicando que o usuário não está autenticado.

Para poder assegurar que uma rota seja acessada somente por autorização:

[HttpGet]
[Authorize] -> apenas quem estiver autorizado
public async Task<IActionResult> GetAll()
{
    var restaurants = await mediator.Send(new GetAllRestaurantsQuery());
    return Ok(restaurants);
}

Ou então, coloca o [Authorize] a nível de controlador para que todo ele seja passivo de autorização.

*adicinando um endpoint para logout:

//route for logout
app.MapPost("/logout", async (SignInManager<User> signInManager) =>
{
    await signInManager.SignOutAsync().ConfigureAwait(false);
}).RequireAuthorization();


Outra propriedade que podemos usar é [AllowAnonymous] para permitir que alguns endpoints sejam acessados
sem autorização:

[HttpGet]
[AllowAnonymous]
public async Task<IActionResult> GetAll()
{
    var restaurants = await mediator.Send(new GetAllRestaurantsQuery());
    return Ok(restaurants);
}

=============================

Authorization:

Seria o conceito de verificar o que um usuário pode fazer  em uma aplicação. A forma mais comum de 
ceder autorização é através de perfis ou papéis. Com ela também podemos limitar acesso à alguns recursos
bem como só permitir que um usuário modifique algo que ele tenha criado.

Podemos ter 3 papéis: admin, usuário comum e dono de restaurante. Já que com o identity temos
a tabela de userroles criada, podemos inserir manualmente, o num seeder.

*obs: É importante ver onde a lista de papéis irá ser definida no projeto. Se forem mais ligados ao
dominio e a aplicação, podem ficar em domain. Se forem coisas mais próximas de infraestrutura, podem ir
pra Infrastructure.

using Microsoft.AspNetCore.Identity;
using Restaurants.Domain.Constants;
using Restaurants.Domain.Entities;
using Restaurants.Infrastructure.Persistence;

namespace Restaurants.Infrastructure.Seeders;

internal class RestaurantSqliteSeeder(RestaurantsSqliteDbContext restaurantsSqliteDbContext) : IRestaurantSeeder
{
    public async Task Seed()
    {
        if (await restaurantsSqliteDbContext.Database.CanConnectAsync())
        {
            if (!restaurantsSqliteDbContext.Restaurants.Any())
            {
                var restaurants = GetRestaurants();
                restaurantsSqliteDbContext.Restaurants.AddRange(restaurants);
                await restaurantsSqliteDbContext.SaveChangesAsync();
            }

            if (!restaurantsSqliteDbContext.Roles.Any())
            {
                var roles = GetRoles();
                restaurantsSqliteDbContext.Roles.AddRange(roles);
                await restaurantsSqliteDbContext.SaveChangesAsync();
            }

        }
    }

    private IEnumerable<IdentityRole> GetRoles()
    {
        List<IdentityRole> roles = [
            new (UserRoles.User),
            new (UserRoles.Owner),
            new (UserRoles.Admin)
        ];

        return roles;
    }

    private IEnumerable<Restaurant> GetRestaurants()
    {
        List<Restaurant> restaurants = [
            new(){
                Name = "KFC",
                Category = "Fast Food",
                Description = "Finger lickin' good!",
                ContactEmail = "kfc@kfc.com",
                HasDelivery = true,
                Dishes = [
                    new(){
                        Name = "Fried Chicken 1",
                        Description = "Fried Chicken 1!",
                        Price = 10,
                    },
                    new(){
                        Name = "Fried Chicken 2",
                        Description = "Fried Chicken 2!",
                        Price = 20,
                    },
                ],
                Address = new() {
                    City = "Recife",
                    PostalCode = "50920-525",
                    Street = "Av. Padre Ibiapina"
                }
            },
            new(){
                Name = "McDonalds",
                Category = "Fast Food",
                Description = "I'm lovin' it!",
                ContactEmail = "mcdonalds@mcdonalds.com",
                HasDelivery = true,
                Dishes = [
                    new(){
                        Name = "BigMac",
                        Description = "BigMac!",
                        Price = 10,
                    },
                    new(){
                        Name = "McFish",
                        Description = "McFish!",
                        Price = 20,
                    },
                ],
                Address = new() {
                    City = "Recife 2",
                    PostalCode = "50920-525-2",
                    Street = "Av. Padre Ibiapina 2"
                }
            },
        ];
        return restaurants;
    }
}

Exemplo de como ficaria o seeder acima.

Para ligar um usuário a um papel, temos a tabela AspNetUserRoles, que é 1-n, onde um usuário
pode ter mais de um papel. Basta um insert nessa tabela. Agora o próximo passo seria aplicar a autorização
no código. A anotação [Authorize] pode ser usada de duas formas: sem nada, indicando que um controlador
ou endpoint só pode ser acessado se o usuário tem um token válido, ou passando um papel específico:

[Authorize(Roles = "Admin")] -> indica que o usuário deve ser um admin para poder acessar.

Outra forma é usando o objeto User nos controladores:

User.IsInRole("admin") -> verifica se o usuário atual é um admin.

Agora é preciso configurar a aplicação para permitir o uso de papéis:

services
.AddIdentityApiEndpoints<User>()
.AddRoles<IdentityRole>() 
.AddEntityFrameworkStores<RestaurantsSqliteDbContext>();

Uma diferença entre papel e alegação (claim) é que papel seria uma função a ser executada.
Alegação é algo sobre determinado usuário, o que pode ser usado como autorização. 

Nem toda alegação pode ser um papel. Por exemplo: data de nascimento de determinado usuário.


==================

Atribuindo papéis a usuários: geralmente, essa tarefa fica a cargo de um admin. Podemos criar endpoints
específicos para admins para tratarem dessa operação.

Podemos criar um command e um handler passando o email e o nome do papel:

using MediatR;

namespace Restaurants.Application.Mediator.Users.Commands.AssignUserRole;

public class AssignUserRoleCommand : IRequest
{
    public string UserEmail { get; set; }
    public string RoleName { get; set; }
}

E o handler:

using MediatR;
using Microsoft.AspNetCore.Identity;
using Restaurants.Domain.Entities;
using Restaurants.Domain.Exceptions;

namespace Restaurants.Application.Mediator.Users.Commands.AssignUserRole;

public class AssignUserRoleCommandHandler(UserManager<User> userManager, RoleManager<IdentityRole> roleManager) : IRequestHandler<AssignUserRoleCommand>
{
    public async Task Handle(AssignUserRoleCommand request, CancellationToken cancellationToken)
    {
        var role = await roleManager.FindByNameAsync(request.RoleName);
        var user = await userManager.FindByEmailAsync(request.UserEmail);

        if (role == null)
        {
            throw new NotFoundException("Role not found.");
        }

        if (user == null)
        {
            throw new NotFoundException("User not found.");
        }

        await userManager.AddToRoleAsync(user, role.Name);

    }
}

OBS: o identity core utiliza o atributo normalized name do papel, que seria seu nome maiúsculo.
Para evitar problemas, no seeder vamos inicializar esse atributo também:

new (UserRoles.User)
{
    NormalizedName = UserRoles.User.ToUpper()
},
new (UserRoles.Owner)
{
    NormalizedName = UserRoles.Owner.ToUpper()
},
new (UserRoles.Admin)
{
    NormalizedName = UserRoles.Admin.ToUpper()
}

Para remover um usuário de um papel:

RemoveFromRoleAsync

=======================

Custom user claims:

O Microsoft Identity Core usa em conjunto com roles, o que se chama de claims, ou atributos de um usuário.
Geralmente são informações particulares de um usuário que ajudam a decidir na autorização/autenticação.
Por exemplo, email, nome de usuário, etc. Geralmente incluídos em tokens. Por exemplo em JWT:

 var claims = new[]
{
    new Claim(JwtRegisteredClaimNames.Sub, username),
    new Claim(JwtRegisteredClaimNames.Email, email),
    new Claim(ClaimTypes.Role, role)
};

var key = new SymmetricSecurityKey(System.Text.Encoding.UTF8.GetBytes("your_secret_key_here"));
var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

var token = new JwtSecurityToken(
    issuer: "your_issuer",
    audience: "your_audience",
    claims: claims,
    expires: DateTime.UtcNow.AddHours(1),
    signingCredentials: creds
);

return new JwtSecurityTokenHandler().WriteToken(token);

Se criam claims que são passadas como parâmetro para a construção de um token de autenticação.

Na aplicação podemos extender a classe base que gera os claims: UserClaimsPrincipalFactory.
Ela recebe o tipo de usuário e o de roles. Se forem os padrão, seriam IdentityUser e IdentityRole.

using System.Security.Claims;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Options;
using Restaurants.Domain.Entities;

namespace Restaurants.Infrastructure.Authorization;

public class RestaurantsUserClaimsPrincipalFactory : UserClaimsPrincipalFactory<User, IdentityRole>
{
    public RestaurantsUserClaimsPrincipalFactory(UserManager<User> userManager, RoleManager<IdentityRole> roleManager, IOptions<IdentityOptions> options) : base(userManager, roleManager, options)
    {
    }

    public override async Task<ClaimsPrincipal> CreateAsync(User user)
    {
        var id = await GenerateClaimsAsync(user);

        if (user.Nationality is not null)
        {
            id.AddClaim(new Claim("Nationality", user.Nationality));
        }

        if (user.DateOfBirth is not null)
        {
            id.AddClaim(new Claim("DateOfBirth", user.DateOfBirth.Value.ToString("yyyy-MM-dd")));
        }

        return new ClaimsPrincipal(id);
    }
}

É possível injetar aqui dbcontexts para procurar mais informações para serem feitas de claims.
No exemplo acima, vemos se o usuário possui Nationality e DateOfBirth. Se sim, são adicionados
como claims, que podem ser vistas em um serviço/controlador através do objeto User.

Por fim, basta registrar como serviço:

AddClaimsPrincipalFactory<RestaurantsUserClaimsPrincipalFactory>()

Uma vez que definimos claims, podemos usá-las para garantir autorização através de políticas ou policies.

services.AddAuthorizationBuilder()
            .AddPolicy("HasNationality",
                builder => builder.RequireClaim("Nationality"));

Se adiciona o AddAuthorizationBuilder e se adiciona uma politica de que seja necessária a claim de 
que se tenha Nationality, através do nome "HasNationality". Se para usar num controlador, por exemplo:

[Authorize(Policy="HasNationality")] -> só autoriza se tiver essa claim. Além disso, posso forçar que
além da claim, que ela seja de valores específicos:

services.AddAuthorizationBuilder()
            .AddPolicy("HasNationality",
                builder => builder.RequireClaim("Nationality", "value1", "value2", ...));

============

Podemos criar políticas customizadas: por exemplo, se um usuário tem 20 ou mais anos de idade.